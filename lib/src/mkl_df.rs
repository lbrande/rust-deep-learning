/* automatically generated by rust-bindgen */

pub const DF_STATUS_OK : u32 = 0;
pub const DF_ERROR_CPU_NOT_SUPPORTED : i32 = -1;
pub const DF_ERROR_NULL_TASK_DESCRIPTOR : i32 = -1000;
pub const DF_ERROR_MEM_FAILURE : i32 = -1001;
pub const DF_ERROR_METHOD_NOT_SUPPORTED : i32 = -1002;
pub const DF_ERROR_COMP_TYPE_NOT_SUPPORTED : i32 = -1003;
pub const DF_ERROR_NULL_PTR : i32 = -1037;
pub const DF_ERROR_BAD_NX : i32 = -1004;
pub const DF_ERROR_BAD_X : i32 = -1005;
pub const DF_ERROR_BAD_X_HINT : i32 = -1006;
pub const DF_ERROR_BAD_NY : i32 = -1007;
pub const DF_ERROR_BAD_Y : i32 = -1008;
pub const DF_ERROR_BAD_Y_HINT : i32 = -1009;
pub const DF_ERROR_BAD_SPLINE_ORDER : i32 = -1010;
pub const DF_ERROR_BAD_SPLINE_TYPE : i32 = -1011;
pub const DF_ERROR_BAD_IC_TYPE : i32 = -1012;
pub const DF_ERROR_BAD_IC : i32 = -1013;
pub const DF_ERROR_BAD_BC_TYPE : i32 = -1014;
pub const DF_ERROR_BAD_BC : i32 = -1015;
pub const DF_ERROR_BAD_PP_COEFF : i32 = -1016;
pub const DF_ERROR_BAD_PP_COEFF_HINT : i32 = -1017;
pub const DF_ERROR_BAD_PERIODIC_VAL : i32 = -1018;
pub const DF_ERROR_BAD_DATA_ATTR : i32 = -1019;
pub const DF_ERROR_BAD_DATA_IDX : i32 = -1020;
pub const DF_ERROR_BAD_NSITE : i32 = -1021;
pub const DF_ERROR_BAD_SITE : i32 = -1022;
pub const DF_ERROR_BAD_SITE_HINT : i32 = -1023;
pub const DF_ERROR_BAD_NDORDER : i32 = -1024;
pub const DF_ERROR_BAD_DORDER : i32 = -1025;
pub const DF_ERROR_BAD_DATA_HINT : i32 = -1026;
pub const DF_ERROR_BAD_INTERP : i32 = -1027;
pub const DF_ERROR_BAD_INTERP_HINT : i32 = -1028;
pub const DF_ERROR_BAD_CELL_IDX : i32 = -1029;
pub const DF_ERROR_BAD_NLIM : i32 = -1030;
pub const DF_ERROR_BAD_LLIM : i32 = -1031;
pub const DF_ERROR_BAD_RLIM : i32 = -1032;
pub const DF_ERROR_BAD_INTEGR : i32 = -1033;
pub const DF_ERROR_BAD_INTEGR_HINT : i32 = -1034;
pub const DF_ERROR_BAD_LOOKUP_INTERP_SITE : i32 = -1035;
pub const DF_ERROR_BAD_CHECK_FLAG : i32 = -1036;
pub const VSL_DF_ERROR_INTERNAL_C1 : i32 = -1500;
pub const VSL_DF_ERROR_INTERNAL_C2 : i32 = -1501;
pub const DF_STATUS_EXACT_RESULT : u32 = 1000;
pub const DF_X : u32 = 1;
pub const DF_Y : u32 = 2;
pub const DF_IC : u32 = 3;
pub const DF_BC : u32 = 4;
pub const DF_PP_SCOEFF : u32 = 5;
pub const DF_NX : u32 = 14;
pub const DF_XHINT : u32 = 15;
pub const DF_NY : u32 = 16;
pub const DF_YHINT : u32 = 17;
pub const DF_SPLINE_ORDER : u32 = 18;
pub const DF_SPLINE_TYPE : u32 = 19;
pub const DF_IC_TYPE : u32 = 20;
pub const DF_BC_TYPE : u32 = 21;
pub const DF_PP_COEFF_HINT : u32 = 22;
pub const DF_CHECK_FLAG : u32 = 23;
pub const DF_PP_STD : u32 = 0;
pub const DF_PP_LINEAR : u32 = 2;
pub const DF_PP_QUADRATIC : u32 = 3;
pub const DF_PP_CUBIC : u32 = 4;
pub const DF_PP_DEFAULT : u32 = 0;
pub const DF_PP_SUBBOTIN : u32 = 1;
pub const DF_PP_NATURAL : u32 = 2;
pub const DF_PP_HERMITE : u32 = 3;
pub const DF_PP_BESSEL : u32 = 4;
pub const DF_PP_AKIMA : u32 = 5;
pub const DF_LOOKUP_INTERPOLANT : u32 = 6;
pub const DF_CR_STEPWISE_CONST_INTERPOLANT : u32 = 7;
pub const DF_CL_STEPWISE_CONST_INTERPOLANT : u32 = 8;
pub const DF_PP_HYMAN : u32 = 9;
pub const DF_NO_BC : u32 = 0;
pub const DF_BC_NOT_A_KNOT : u32 = 1;
pub const DF_BC_FREE_END : u32 = 2;
pub const DF_BC_1ST_LEFT_DER : u32 = 4;
pub const DF_BC_1ST_RIGHT_DER : u32 = 8;
pub const DF_BC_2ND_LEFT_DER : u32 = 16;
pub const DF_BC_2ND_RIGHT_DER : u32 = 32;
pub const DF_BC_PERIODIC : u32 = 64;
pub const DF_BC_Q_VAL : u32 = 128;
pub const DF_NO_IC : u32 = 0;
pub const DF_IC_1ST_DER : u32 = 1;
pub const DF_IC_2ND_DER : u32 = 2;
pub const DF_IC_Q_KNOT : u32 = 8;
pub const DF_NO_HINT : u32 = 0;
pub const DF_NON_UNIFORM_PARTITION : u32 = 1;
pub const DF_QUASI_UNIFORM_PARTITION : u32 = 2;
pub const DF_UNIFORM_PARTITION : u32 = 4;
pub const DF_MATRIX_STORAGE_ROWS : u32 = 16;
pub const DF_MATRIX_STORAGE_COLS : u32 = 32;
pub const DF_SORTED_DATA : u32 = 64;
pub const DF_1ST_COORDINATE : u32 = 128;
pub const DF_MATRIX_STORAGE_FUNCS_SITES_DERS : u32 = 16;
pub const DF_MATRIX_STORAGE_FUNCS_DERS_SITES : u32 = 32;
pub const DF_MATRIX_STORAGE_SITES_FUNCS_DERS : u32 = 256;
pub const DF_MATRIX_STORAGE_SITES_DERS_FUNCS : u32 = 512;
pub const DF_NO_APRIORI_INFO : u32 = 0;
pub const DF_APRIORI_MOST_LIKELY_CELL : u32 = 1;
pub const DF_INTERP : u32 = 1;
pub const DF_CELL : u32 = 2;
pub const DF_INTERP_USER_CELL : u32 = 4;
pub const DF_METHOD_STD : u32 = 0;
pub const DF_METHOD_PP : u32 = 1;
pub const DF_ENABLE_CHECK_FLAG : u32 = 0;
pub const DF_DISABLE_CHECK_FLAG : u32 = 1;
pub const DF_PP_SPLINE : u32 = 0;
pub const DF_INTEGR_SEARCH_CB_LLIM_FLAG : u32 = 0;
pub const DF_INTEGR_SEARCH_CB_RLIM_FLAG : u32 = 1;
pub const MKL_DOMAIN_ALL : u32 = 0;
pub const MKL_DOMAIN_BLAS : u32 = 1;
pub const MKL_DOMAIN_FFT : u32 = 2;
pub const MKL_DOMAIN_VML : u32 = 3;
pub const MKL_DOMAIN_PARDISO : u32 = 4;
pub const MKL_CBWR_BRANCH : u32 = 1;
pub const MKL_CBWR_ALL : i32 = -1;
pub const MKL_CBWR_UNSET_ALL : u32 = 0;
pub const MKL_CBWR_OFF : u32 = 0;
pub const MKL_CBWR_BRANCH_OFF : u32 = 1;
pub const MKL_CBWR_AUTO : u32 = 2;
pub const MKL_CBWR_COMPATIBLE : u32 = 3;
pub const MKL_CBWR_SSE2 : u32 = 4;
pub const MKL_CBWR_SSSE3 : u32 = 6;
pub const MKL_CBWR_SSE4_1 : u32 = 7;
pub const MKL_CBWR_SSE4_2 : u32 = 8;
pub const MKL_CBWR_AVX : u32 = 9;
pub const MKL_CBWR_AVX2 : u32 = 10;
pub const MKL_CBWR_AVX512_MIC : u32 = 11;
pub const MKL_CBWR_AVX512 : u32 = 12;
pub const MKL_CBWR_AVX512_MIC_E1 : u32 = 13;
pub const MKL_CBWR_SUCCESS : u32 = 0;
pub const MKL_CBWR_ERR_INVALID_SETTINGS : i32 = -1;
pub const MKL_CBWR_ERR_INVALID_INPUT : i32 = -2;
pub const MKL_CBWR_ERR_UNSUPPORTED_BRANCH : i32 = -3;
pub const MKL_CBWR_ERR_UNKNOWN_BRANCH : i32 = -4;
pub const MKL_CBWR_ERR_MODE_CHANGE_FAILURE : i32 = -8;
pub const MKL_CBWR_SSE3 : u32 = 5;
# [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MKL_Complex8 { pub real : f32 , pub imag : f32 , } # [ test ] fn bindgen_test_layout__MKL_Complex8 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _MKL_Complex8 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _MKL_Complex8 ) ) );
assert_eq ! ( :: std :: mem :: align_of :: < _MKL_Complex8 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _MKL_Complex8 ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex8 > ( ) ) ) . real as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex8 ) , "::" , stringify ! ( real ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex8 > ( ) ) ) . imag as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex8 ) , "::" , stringify ! ( imag ) ) );
} pub type MKL_Complex8 = _MKL_Complex8;
# [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MKL_Complex16 { pub real : f64 , pub imag : f64 , } # [ test ] fn bindgen_test_layout__MKL_Complex16 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _MKL_Complex16 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _MKL_Complex16 ) ) );
assert_eq ! ( :: std :: mem :: align_of :: < _MKL_Complex16 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _MKL_Complex16 ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex16 > ( ) ) ) . real as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex16 ) , "::" , stringify ! ( real ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex16 > ( ) ) ) . imag as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex16 ) , "::" , stringify ! ( imag ) ) );
} pub type MKL_Complex16 = _MKL_Complex16;
# [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct MKLVersion { pub MajorVersion : :: std :: os :: raw :: c_int , pub MinorVersion : :: std :: os :: raw :: c_int , pub UpdateVersion : :: std :: os :: raw :: c_int , pub ProductStatus : * mut :: std :: os :: raw :: c_char , pub Build : * mut :: std :: os :: raw :: c_char , pub Processor : * mut :: std :: os :: raw :: c_char , pub Platform : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_MKLVersion ( ) { assert_eq ! ( :: std :: mem :: size_of :: < MKLVersion > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( MKLVersion ) ) );
assert_eq ! ( :: std :: mem :: align_of :: < MKLVersion > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( MKLVersion ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . MajorVersion as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( MajorVersion ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . MinorVersion as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( MinorVersion ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . UpdateVersion as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( UpdateVersion ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . ProductStatus as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( ProductStatus ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . Build as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( Build ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . Processor as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( Processor ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . Platform as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( Platform ) ) );
} pub const MKL_LAYOUT_MKL_ROW_MAJOR : MKL_LAYOUT = 101;
pub const MKL_LAYOUT_MKL_COL_MAJOR : MKL_LAYOUT = 102;
pub type MKL_LAYOUT = u32;
pub const MKL_TRANSPOSE_MKL_NOTRANS : MKL_TRANSPOSE = 111;
pub const MKL_TRANSPOSE_MKL_TRANS : MKL_TRANSPOSE = 112;
pub const MKL_TRANSPOSE_MKL_CONJTRANS : MKL_TRANSPOSE = 113;
pub type MKL_TRANSPOSE = u32;
pub const MKL_UPLO_MKL_UPPER : MKL_UPLO = 121;
pub const MKL_UPLO_MKL_LOWER : MKL_UPLO = 122;
pub type MKL_UPLO = u32;
pub const MKL_DIAG_MKL_NONUNIT : MKL_DIAG = 131;
pub const MKL_DIAG_MKL_UNIT : MKL_DIAG = 132;
pub type MKL_DIAG = u32;
pub const MKL_SIDE_MKL_LEFT : MKL_SIDE = 141;
pub const MKL_SIDE_MKL_RIGHT : MKL_SIDE = 142;
pub type MKL_SIDE = u32;
pub const MKL_COMPACT_PACK_MKL_COMPACT_SSE : MKL_COMPACT_PACK = 181;
pub const MKL_COMPACT_PACK_MKL_COMPACT_AVX : MKL_COMPACT_PACK = 182;
pub const MKL_COMPACT_PACK_MKL_COMPACT_AVX512 : MKL_COMPACT_PACK = 183;
pub type MKL_COMPACT_PACK = u32;
pub type DFTaskPtr = * mut :: std :: os :: raw :: c_void;
# [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _dfSearchCallBackLibraryParams { pub limit_type_flag : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__dfSearchCallBackLibraryParams ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _dfSearchCallBackLibraryParams > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( _dfSearchCallBackLibraryParams ) ) );
assert_eq ! ( :: std :: mem :: align_of :: < _dfSearchCallBackLibraryParams > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _dfSearchCallBackLibraryParams ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dfSearchCallBackLibraryParams > ( ) ) ) . limit_type_flag as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _dfSearchCallBackLibraryParams ) , "::" , stringify ! ( limit_type_flag ) ) );
} pub type dfSearchCallBackLibraryParams = _dfSearchCallBackLibraryParams;
# [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _dfInterpCallBackLibraryParams { pub reserved1 : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__dfInterpCallBackLibraryParams ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _dfInterpCallBackLibraryParams > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( _dfInterpCallBackLibraryParams ) ) );
assert_eq ! ( :: std :: mem :: align_of :: < _dfInterpCallBackLibraryParams > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _dfInterpCallBackLibraryParams ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dfInterpCallBackLibraryParams > ( ) ) ) . reserved1 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _dfInterpCallBackLibraryParams ) , "::" , stringify ! ( reserved1 ) ) );
} pub type dfInterpCallBackLibraryParams = _dfInterpCallBackLibraryParams;
# [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _dfIntegrCallBackLibraryParams { pub reserved1 : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__dfIntegrCallBackLibraryParams ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _dfIntegrCallBackLibraryParams > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( _dfIntegrCallBackLibraryParams ) ) );
assert_eq ! ( :: std :: mem :: align_of :: < _dfIntegrCallBackLibraryParams > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _dfIntegrCallBackLibraryParams ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dfIntegrCallBackLibraryParams > ( ) ) ) . reserved1 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _dfIntegrCallBackLibraryParams ) , "::" , stringify ! ( reserved1 ) ) );
} pub type dfIntegrCallBackLibraryParams = _dfIntegrCallBackLibraryParams;
pub type dfsInterpCallBack = :: std :: option :: Option < unsafe extern "C" fn ( n : * mut :: std :: os :: raw :: c_longlong , cell : * mut :: std :: os :: raw :: c_longlong , site : * mut f32 , r : * mut f32 , user_param : * mut :: std :: os :: raw :: c_void , library_params : * mut dfInterpCallBackLibraryParams ) -> :: std :: os :: raw :: c_int >;
pub type dfdInterpCallBack = :: std :: option :: Option < unsafe extern "C" fn ( n : * mut :: std :: os :: raw :: c_longlong , cell : * mut :: std :: os :: raw :: c_longlong , site : * mut f64 , r : * mut f64 , user_param : * mut :: std :: os :: raw :: c_void , library_params : * mut dfInterpCallBackLibraryParams ) -> :: std :: os :: raw :: c_int >;
pub type dfsIntegrCallBack = :: std :: option :: Option < unsafe extern "C" fn ( n : * mut :: std :: os :: raw :: c_longlong , lcell : * mut :: std :: os :: raw :: c_longlong , llim : * mut f32 , rcell : * mut :: std :: os :: raw :: c_longlong , rlim : * mut f32 , r : * mut f32 , user_params : * mut :: std :: os :: raw :: c_void , library_params : * mut dfIntegrCallBackLibraryParams ) -> :: std :: os :: raw :: c_int >;
pub type dfdIntegrCallBack = :: std :: option :: Option < unsafe extern "C" fn ( n : * mut :: std :: os :: raw :: c_longlong , lcell : * mut :: std :: os :: raw :: c_longlong , llim : * mut f64 , rcell : * mut :: std :: os :: raw :: c_longlong , rlim : * mut f64 , r : * mut f64 , user_params : * mut :: std :: os :: raw :: c_void , library_params : * mut dfIntegrCallBackLibraryParams ) -> :: std :: os :: raw :: c_int >;
pub type dfsSearchCellsCallBack = :: std :: option :: Option < unsafe extern "C" fn ( n : * mut :: std :: os :: raw :: c_longlong , site : * mut f32 , cell : * mut :: std :: os :: raw :: c_longlong , flag : * mut :: std :: os :: raw :: c_int , user_params : * mut :: std :: os :: raw :: c_void , library_params : * mut dfSearchCallBackLibraryParams ) -> :: std :: os :: raw :: c_int >;
pub type dfdSearchCellsCallBack = :: std :: option :: Option < unsafe extern "C" fn ( n : * mut :: std :: os :: raw :: c_longlong , site : * mut f64 , cell : * mut :: std :: os :: raw :: c_longlong , flag : * mut :: std :: os :: raw :: c_int , user_params : * mut :: std :: os :: raw :: c_void , library_params : * mut dfSearchCallBackLibraryParams ) -> :: std :: os :: raw :: c_int >;
extern "C" { pub fn dfsNewTask1D ( arg1 : * mut DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : * const f32 , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsnewtask1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const f32 , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSNEWTASK1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const f32 , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdNewTask1D ( arg1 : * mut DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : * const f64 , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdnewtask1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const f64 , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDNEWTASK1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const f64 , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsEditPtr ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : * const f32 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfseditptr_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const f32 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSEDITPTR_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const f32 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdEditPtr ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : * const f64 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdeditptr_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const f64 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDEDITPTR_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const f64 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfiEditVal ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfieditval_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFIEDITVAL_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsEditIdxPtr ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * const f32 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfseditidxptr_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f32 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSEDITIDXPTR_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f32 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdEditIdxPtr ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * const f64 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdeditidxptr_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f64 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDEDITIDXPTR_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f64 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsEditPPSpline1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * const f32 , arg6 : :: std :: os :: raw :: c_int , arg7 : * const f32 , arg8 : * const f32 , arg9 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfseditppspline1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const f32 , arg6 : * const :: std :: os :: raw :: c_int , arg7 : * const f32 , arg8 : * const f32 , arg9 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSEDITPPSPLINE1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const f32 , arg6 : * const :: std :: os :: raw :: c_int , arg7 : * const f32 , arg8 : * const f32 , arg9 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdEditPPSpline1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * const f64 , arg6 : :: std :: os :: raw :: c_int , arg7 : * const f64 , arg8 : * const f64 , arg9 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdeditppspline1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const f64 , arg6 : * const :: std :: os :: raw :: c_int , arg7 : * const f64 , arg8 : * const f64 , arg9 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDEDITPPSPLINE1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const f64 , arg6 : * const :: std :: os :: raw :: c_int , arg7 : * const f64 , arg8 : * const f64 , arg9 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsQueryPtr ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut * mut f32 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsqueryptr_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * mut * mut f32 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSQUERYPTR_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * mut * mut f32 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdQueryPtr ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut * mut f64 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdqueryptr_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * mut * mut f64 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDQUERYPTR_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * mut * mut f64 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfiQueryVal ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfiqueryval_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFIQUERYVAL_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsQueryIdxPtr ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut * mut f32 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsqueryidxptr_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * mut * mut f32 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSQUERYIDXPTR_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * mut * mut f32 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdQueryIdxPtr ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut * mut f64 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdqueryidxptr_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * mut * mut f64 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDQUERYIDXPTR_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * mut * mut f64 ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsConstruct1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsconstruct1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSCONSTRUCT1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdConstruct1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdconstruct1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDCONSTRUCT1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsInterpolateEx1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * const f32 , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , arg8 : * const :: std :: os :: raw :: c_int , arg9 : * const f32 , arg10 : * mut f32 , arg11 : :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int , arg13 : dfsInterpCallBack , arg14 : * const :: std :: os :: raw :: c_void , arg15 : dfsInterpCallBack , arg16 : * const :: std :: os :: raw :: c_void , arg17 : dfsInterpCallBack , arg18 : * const :: std :: os :: raw :: c_void , arg19 : dfsSearchCellsCallBack , arg20 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsinterpolateex1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const f32 , arg6 : * const :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const :: std :: os :: raw :: c_int , arg9 : * const f32 , arg10 : * mut f32 , arg11 : * const :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int , arg13 : dfsInterpCallBack , arg14 : * const :: std :: os :: raw :: c_void , arg15 : dfsInterpCallBack , arg16 : * const :: std :: os :: raw :: c_void , arg17 : dfsInterpCallBack , arg18 : * const :: std :: os :: raw :: c_void , arg19 : dfsSearchCellsCallBack , arg20 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSINTERPOLATEEX1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const f32 , arg6 : * const :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const :: std :: os :: raw :: c_int , arg9 : * const f32 , arg10 : * mut f32 , arg11 : * const :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int , arg13 : dfsInterpCallBack , arg14 : * const :: std :: os :: raw :: c_void , arg15 : dfsInterpCallBack , arg16 : * const :: std :: os :: raw :: c_void , arg17 : dfsInterpCallBack , arg18 : * const :: std :: os :: raw :: c_void , arg19 : dfsSearchCellsCallBack , arg20 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdInterpolateEx1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * const f64 , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , arg8 : * const :: std :: os :: raw :: c_int , arg9 : * const f64 , arg10 : * mut f64 , arg11 : :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int , arg13 : dfdInterpCallBack , arg14 : * const :: std :: os :: raw :: c_void , arg15 : dfdInterpCallBack , arg16 : * const :: std :: os :: raw :: c_void , arg17 : dfdInterpCallBack , arg18 : * const :: std :: os :: raw :: c_void , arg19 : dfdSearchCellsCallBack , arg20 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdinterpolateex1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const f64 , arg6 : * const :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const :: std :: os :: raw :: c_int , arg9 : * const f64 , arg10 : * mut f64 , arg11 : * const :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int , arg13 : dfdInterpCallBack , arg14 : * const :: std :: os :: raw :: c_void , arg15 : dfdInterpCallBack , arg16 : * const :: std :: os :: raw :: c_void , arg17 : dfdInterpCallBack , arg18 : * const :: std :: os :: raw :: c_void , arg19 : dfdSearchCellsCallBack , arg20 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDINTERPOLATEEX1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const f64 , arg6 : * const :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const :: std :: os :: raw :: c_int , arg9 : * const f64 , arg10 : * mut f64 , arg11 : * const :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int , arg13 : dfdInterpCallBack , arg14 : * const :: std :: os :: raw :: c_void , arg15 : dfdInterpCallBack , arg16 : * const :: std :: os :: raw :: c_void , arg17 : dfdInterpCallBack , arg18 : * const :: std :: os :: raw :: c_void , arg19 : dfdSearchCellsCallBack , arg20 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsInterpolate1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * const f32 , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , arg8 : * const :: std :: os :: raw :: c_int , arg9 : * const f32 , arg10 : * mut f32 , arg11 : :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsinterpolate1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const f32 , arg6 : * const :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const :: std :: os :: raw :: c_int , arg9 : * const f32 , arg10 : * mut f32 , arg11 : * const :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSINTERPOLATE1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const f32 , arg6 : * const :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const :: std :: os :: raw :: c_int , arg9 : * const f32 , arg10 : * mut f32 , arg11 : * const :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdInterpolate1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * const f64 , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , arg8 : * const :: std :: os :: raw :: c_int , arg9 : * const f64 , arg10 : * mut f64 , arg11 : :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdinterpolate1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const f64 , arg6 : * const :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const :: std :: os :: raw :: c_int , arg9 : * const f64 , arg10 : * mut f64 , arg11 : * const :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDINTERPOLATE1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_int , arg5 : * const f64 , arg6 : * const :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const :: std :: os :: raw :: c_int , arg9 : * const f64 , arg10 : * mut f64 , arg11 : * const :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsSearchCellsEx1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * const f32 , arg5 : :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : dfsSearchCellsCallBack , arg9 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfssearchcellsex1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f32 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : dfsSearchCellsCallBack , arg9 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSSEARCHCELLSEX1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f32 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : dfsSearchCellsCallBack , arg9 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdSearchCellsEx1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * const f64 , arg5 : :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : dfdSearchCellsCallBack , arg9 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdsearchcellsex1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f64 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : dfdSearchCellsCallBack , arg9 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDSEARCHCELLSEX1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f64 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : dfdSearchCellsCallBack , arg9 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsSearchCells1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * const f32 , arg5 : :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfssearchcells1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f32 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSSEARCHCELLS1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f32 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdSearchCells1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * const f64 , arg5 : :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdsearchcells1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f64 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDSEARCHCELLS1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f64 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsIntegrate1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * const f32 , arg5 : :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : :: std :: os :: raw :: c_int , arg8 : * const f32 , arg9 : * const f32 , arg10 : * mut f32 , arg11 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsintegrate1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f32 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const f32 , arg9 : * const f32 , arg10 : * mut f32 , arg11 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSINTEGRATE1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f32 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const f32 , arg9 : * const f32 , arg10 : * mut f32 , arg11 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdIntegrate1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * const f64 , arg5 : :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : :: std :: os :: raw :: c_int , arg8 : * const f64 , arg9 : * const f64 , arg10 : * mut f64 , arg11 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdintegrate1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f64 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const f64 , arg9 : * const f64 , arg10 : * mut f64 , arg11 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDINTEGRATE1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f64 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const f64 , arg9 : * const f64 , arg10 : * mut f64 , arg11 : * const :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsIntegrateEx1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * const f32 , arg5 : :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : :: std :: os :: raw :: c_int , arg8 : * const f32 , arg9 : * const f32 , arg10 : * mut f32 , arg11 : :: std :: os :: raw :: c_int , arg12 : dfsIntegrCallBack , arg13 : * const :: std :: os :: raw :: c_void , arg14 : dfsIntegrCallBack , arg15 : * const :: std :: os :: raw :: c_void , arg16 : dfsIntegrCallBack , arg17 : * const :: std :: os :: raw :: c_void , arg18 : dfsSearchCellsCallBack , arg19 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfsintegrateex1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f32 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const f32 , arg9 : * const f32 , arg10 : * mut f32 , arg11 : * const :: std :: os :: raw :: c_int , arg12 : dfsIntegrCallBack , arg13 : * const :: std :: os :: raw :: c_void , arg14 : dfsIntegrCallBack , arg15 : * const :: std :: os :: raw :: c_void , arg16 : dfsIntegrCallBack , arg17 : * const :: std :: os :: raw :: c_void , arg18 : dfsSearchCellsCallBack , arg19 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFSINTEGRATEEX1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f32 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f32 , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const f32 , arg9 : * const f32 , arg10 : * mut f32 , arg11 : * const :: std :: os :: raw :: c_int , arg12 : dfsIntegrCallBack , arg13 : * const :: std :: os :: raw :: c_void , arg14 : dfsIntegrCallBack , arg15 : * const :: std :: os :: raw :: c_void , arg16 : dfsIntegrCallBack , arg17 : * const :: std :: os :: raw :: c_void , arg18 : dfsSearchCellsCallBack , arg19 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdIntegrateEx1D ( arg1 : DFTaskPtr , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * const f64 , arg5 : :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : :: std :: os :: raw :: c_int , arg8 : * const f64 , arg9 : * const f64 , arg10 : * mut f64 , arg11 : :: std :: os :: raw :: c_int , arg12 : dfdIntegrCallBack , arg13 : * const :: std :: os :: raw :: c_void , arg14 : dfdIntegrCallBack , arg15 : * const :: std :: os :: raw :: c_void , arg16 : dfdIntegrCallBack , arg17 : * const :: std :: os :: raw :: c_void , arg18 : dfdSearchCellsCallBack , arg19 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdintegrateex1d_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f64 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const f64 , arg9 : * const f64 , arg10 : * mut f64 , arg11 : * const :: std :: os :: raw :: c_int , arg12 : dfdIntegrCallBack , arg13 : * const :: std :: os :: raw :: c_void , arg14 : dfdIntegrCallBack , arg15 : * const :: std :: os :: raw :: c_void , arg16 : dfdIntegrCallBack , arg17 : * const :: std :: os :: raw :: c_void , arg18 : dfdSearchCellsCallBack , arg19 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDINTEGRATEEX1D_ ( arg1 : * mut DFTaskPtr , arg2 : * const :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_int , arg4 : * const f64 , arg5 : * const :: std :: os :: raw :: c_int , arg6 : * const f64 , arg7 : * const :: std :: os :: raw :: c_int , arg8 : * const f64 , arg9 : * const f64 , arg10 : * mut f64 , arg11 : * const :: std :: os :: raw :: c_int , arg12 : dfdIntegrCallBack , arg13 : * const :: std :: os :: raw :: c_void , arg14 : dfdIntegrCallBack , arg15 : * const :: std :: os :: raw :: c_void , arg16 : dfdIntegrCallBack , arg17 : * const :: std :: os :: raw :: c_void , arg18 : dfdSearchCellsCallBack , arg19 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfDeleteTask ( arg1 : * mut DFTaskPtr ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn dfdeletetask_ ( arg1 : * mut DFTaskPtr ) -> :: std :: os :: raw :: c_int;
} extern "C" { pub fn DFDELETETASK_ ( arg1 : * mut DFTaskPtr ) -> :: std :: os :: raw :: c_int;
}
/* automatically generated by rust-bindgen */

pub const MKL_DOMAIN_ALL : u32 = 0;
pub const MKL_DOMAIN_BLAS : u32 = 1;
pub const MKL_DOMAIN_FFT : u32 = 2;
pub const MKL_DOMAIN_VML : u32 = 3;
pub const MKL_DOMAIN_PARDISO : u32 = 4;
pub const MKL_CBWR_BRANCH : u32 = 1;
pub const MKL_CBWR_ALL : i32 = -1;
pub const MKL_CBWR_UNSET_ALL : u32 = 0;
pub const MKL_CBWR_OFF : u32 = 0;
pub const MKL_CBWR_BRANCH_OFF : u32 = 1;
pub const MKL_CBWR_AUTO : u32 = 2;
pub const MKL_CBWR_COMPATIBLE : u32 = 3;
pub const MKL_CBWR_SSE2 : u32 = 4;
pub const MKL_CBWR_SSSE3 : u32 = 6;
pub const MKL_CBWR_SSE4_1 : u32 = 7;
pub const MKL_CBWR_SSE4_2 : u32 = 8;
pub const MKL_CBWR_AVX : u32 = 9;
pub const MKL_CBWR_AVX2 : u32 = 10;
pub const MKL_CBWR_AVX512_MIC : u32 = 11;
pub const MKL_CBWR_AVX512 : u32 = 12;
pub const MKL_CBWR_AVX512_MIC_E1 : u32 = 13;
pub const MKL_CBWR_SUCCESS : u32 = 0;
pub const MKL_CBWR_ERR_INVALID_SETTINGS : i32 = -1;
pub const MKL_CBWR_ERR_INVALID_INPUT : i32 = -2;
pub const MKL_CBWR_ERR_UNSUPPORTED_BRANCH : i32 = -3;
pub const MKL_CBWR_ERR_UNKNOWN_BRANCH : i32 = -4;
pub const MKL_CBWR_ERR_MODE_CHANGE_FAILURE : i32 = -8;
pub const MKL_CBWR_SSE3 : u32 = 5;
pub type wchar_t = :: std :: os :: raw :: c_int;
# [ repr ( C ) ] # [ repr ( align ( 16 ) ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct max_align_t { pub __clang_max_align_nonce1 : :: std :: os :: raw :: c_longlong , pub __bindgen_padding_0 : u64 , pub __clang_max_align_nonce2 : u128 , } # [ test ] fn bindgen_test_layout_max_align_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < max_align_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( max_align_t ) ) );
assert_eq ! ( :: std :: mem :: align_of :: < max_align_t > ( ) , 16usize , concat ! ( "Alignment of " , stringify ! ( max_align_t ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < max_align_t > ( ) ) ) . __clang_max_align_nonce1 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce1 ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < max_align_t > ( ) ) ) . __clang_max_align_nonce2 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce2 ) ) );
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MKL_Complex8 { pub real : f32 , pub imag : f32 , } # [ test ] fn bindgen_test_layout__MKL_Complex8 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _MKL_Complex8 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _MKL_Complex8 ) ) );
assert_eq ! ( :: std :: mem :: align_of :: < _MKL_Complex8 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _MKL_Complex8 ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex8 > ( ) ) ) . real as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex8 ) , "::" , stringify ! ( real ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex8 > ( ) ) ) . imag as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex8 ) , "::" , stringify ! ( imag ) ) );
} pub type MKL_Complex8 = _MKL_Complex8;
# [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MKL_Complex16 { pub real : f64 , pub imag : f64 , } # [ test ] fn bindgen_test_layout__MKL_Complex16 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _MKL_Complex16 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _MKL_Complex16 ) ) );
assert_eq ! ( :: std :: mem :: align_of :: < _MKL_Complex16 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _MKL_Complex16 ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex16 > ( ) ) ) . real as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex16 ) , "::" , stringify ! ( real ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex16 > ( ) ) ) . imag as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex16 ) , "::" , stringify ! ( imag ) ) );
} pub type MKL_Complex16 = _MKL_Complex16;
# [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct MKLVersion { pub MajorVersion : :: std :: os :: raw :: c_int , pub MinorVersion : :: std :: os :: raw :: c_int , pub UpdateVersion : :: std :: os :: raw :: c_int , pub ProductStatus : * mut :: std :: os :: raw :: c_char , pub Build : * mut :: std :: os :: raw :: c_char , pub Processor : * mut :: std :: os :: raw :: c_char , pub Platform : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_MKLVersion ( ) { assert_eq ! ( :: std :: mem :: size_of :: < MKLVersion > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( MKLVersion ) ) );
assert_eq ! ( :: std :: mem :: align_of :: < MKLVersion > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( MKLVersion ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . MajorVersion as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( MajorVersion ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . MinorVersion as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( MinorVersion ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . UpdateVersion as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( UpdateVersion ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . ProductStatus as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( ProductStatus ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . Build as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( Build ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . Processor as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( Processor ) ) );
assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . Platform as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( Platform ) ) );
} pub const MKL_LAYOUT_MKL_ROW_MAJOR : MKL_LAYOUT = 101;
pub const MKL_LAYOUT_MKL_COL_MAJOR : MKL_LAYOUT = 102;
pub type MKL_LAYOUT = u32;
pub const MKL_TRANSPOSE_MKL_NOTRANS : MKL_TRANSPOSE = 111;
pub const MKL_TRANSPOSE_MKL_TRANS : MKL_TRANSPOSE = 112;
pub const MKL_TRANSPOSE_MKL_CONJTRANS : MKL_TRANSPOSE = 113;
pub type MKL_TRANSPOSE = u32;
pub const MKL_UPLO_MKL_UPPER : MKL_UPLO = 121;
pub const MKL_UPLO_MKL_LOWER : MKL_UPLO = 122;
pub type MKL_UPLO = u32;
pub const MKL_DIAG_MKL_NONUNIT : MKL_DIAG = 131;
pub const MKL_DIAG_MKL_UNIT : MKL_DIAG = 132;
pub type MKL_DIAG = u32;
pub const MKL_SIDE_MKL_LEFT : MKL_SIDE = 141;
pub const MKL_SIDE_MKL_RIGHT : MKL_SIDE = 142;
pub type MKL_SIDE = u32;
pub const MKL_COMPACT_PACK_MKL_COMPACT_SSE : MKL_COMPACT_PACK = 181;
pub const MKL_COMPACT_PACK_MKL_COMPACT_AVX : MKL_COMPACT_PACK = 182;
pub const MKL_COMPACT_PACK_MKL_COMPACT_AVX512 : MKL_COMPACT_PACK = 183;
pub type MKL_COMPACT_PACK = u32;
extern "C" { pub fn MKL_Simatcopy ( ordering : :: std :: os :: raw :: c_char , trans : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : f32 , AB : * mut f32 , lda : usize , ldb : usize );
} extern "C" { pub fn MKL_Dimatcopy ( ordering : :: std :: os :: raw :: c_char , trans : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : f64 , AB : * mut f64 , lda : usize , ldb : usize );
} extern "C" { pub fn MKL_Cimatcopy ( ordering : :: std :: os :: raw :: c_char , trans : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : MKL_Complex8 , AB : * mut MKL_Complex8 , lda : usize , ldb : usize );
} extern "C" { pub fn MKL_Zimatcopy ( ordering : :: std :: os :: raw :: c_char , trans : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : MKL_Complex16 , AB : * mut MKL_Complex16 , lda : usize , ldb : usize );
} extern "C" { pub fn MKL_Somatcopy ( ordering : :: std :: os :: raw :: c_char , trans : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : f32 , A : * const f32 , lda : usize , B : * mut f32 , ldb : usize );
} extern "C" { pub fn MKL_Domatcopy ( ordering : :: std :: os :: raw :: c_char , trans : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : f64 , A : * const f64 , lda : usize , B : * mut f64 , ldb : usize );
} extern "C" { pub fn MKL_Comatcopy ( ordering : :: std :: os :: raw :: c_char , trans : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : MKL_Complex8 , A : * const MKL_Complex8 , lda : usize , B : * mut MKL_Complex8 , ldb : usize );
} extern "C" { pub fn MKL_Zomatcopy ( ordering : :: std :: os :: raw :: c_char , trans : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : MKL_Complex16 , A : * const MKL_Complex16 , lda : usize , B : * mut MKL_Complex16 , ldb : usize );
} extern "C" { pub fn MKL_Somatcopy2 ( ordering : :: std :: os :: raw :: c_char , trans : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : f32 , A : * const f32 , lda : usize , stridea : usize , B : * mut f32 , ldb : usize , strideb : usize );
} extern "C" { pub fn MKL_Domatcopy2 ( ordering : :: std :: os :: raw :: c_char , trans : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : f64 , A : * const f64 , lda : usize , stridea : usize , B : * mut f64 , ldb : usize , strideb : usize );
} extern "C" { pub fn MKL_Comatcopy2 ( ordering : :: std :: os :: raw :: c_char , trans : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : MKL_Complex8 , A : * const MKL_Complex8 , lda : usize , stridea : usize , B : * mut MKL_Complex8 , ldb : usize , strideb : usize );
} extern "C" { pub fn MKL_Zomatcopy2 ( ordering : :: std :: os :: raw :: c_char , trans : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : MKL_Complex16 , A : * const MKL_Complex16 , lda : usize , stridea : usize , B : * mut MKL_Complex16 , ldb : usize , strideb : usize );
} extern "C" { pub fn MKL_Somatadd ( ordering : :: std :: os :: raw :: c_char , transa : :: std :: os :: raw :: c_char , transb : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : f32 , A : * const f32 , lda : usize , beta : f32 , B : * const f32 , ldb : usize , C : * mut f32 , ldc : usize );
} extern "C" { pub fn MKL_Domatadd ( ordering : :: std :: os :: raw :: c_char , transa : :: std :: os :: raw :: c_char , transb : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : f64 , A : * const f64 , lda : usize , beta : f64 , B : * const f64 , ldb : usize , C : * mut f64 , ldc : usize );
} extern "C" { pub fn MKL_Comatadd ( ordering : :: std :: os :: raw :: c_char , transa : :: std :: os :: raw :: c_char , transb : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : MKL_Complex8 , A : * const MKL_Complex8 , lda : usize , beta : MKL_Complex8 , B : * const MKL_Complex8 , ldb : usize , C : * mut MKL_Complex8 , ldc : usize );
} extern "C" { pub fn MKL_Zomatadd ( ordering : :: std :: os :: raw :: c_char , transa : :: std :: os :: raw :: c_char , transb : :: std :: os :: raw :: c_char , rows : usize , cols : usize , alpha : MKL_Complex16 , A : * const MKL_Complex16 , lda : usize , beta : MKL_Complex16 , B : * const MKL_Complex16 , ldb : usize , C : * mut MKL_Complex16 , ldc : usize );
}
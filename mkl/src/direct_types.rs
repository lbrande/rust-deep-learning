/* automatically generated by rust-bindgen */

pub const MKL_DOMAIN_ALL : u32 = 0 ; pub const MKL_DOMAIN_BLAS : u32 = 1 ; pub const MKL_DOMAIN_FFT : u32 = 2 ; pub const MKL_DOMAIN_VML : u32 = 3 ; pub const MKL_DOMAIN_PARDISO : u32 = 4 ; pub const MKL_CBWR_BRANCH : u32 = 1 ; pub const MKL_CBWR_ALL : i32 = -1 ; pub const MKL_CBWR_UNSET_ALL : u32 = 0 ; pub const MKL_CBWR_OFF : u32 = 0 ; pub const MKL_CBWR_BRANCH_OFF : u32 = 1 ; pub const MKL_CBWR_AUTO : u32 = 2 ; pub const MKL_CBWR_COMPATIBLE : u32 = 3 ; pub const MKL_CBWR_SSE2 : u32 = 4 ; pub const MKL_CBWR_SSSE3 : u32 = 6 ; pub const MKL_CBWR_SSE4_1 : u32 = 7 ; pub const MKL_CBWR_SSE4_2 : u32 = 8 ; pub const MKL_CBWR_AVX : u32 = 9 ; pub const MKL_CBWR_AVX2 : u32 = 10 ; pub const MKL_CBWR_AVX512_MIC : u32 = 11 ; pub const MKL_CBWR_AVX512 : u32 = 12 ; pub const MKL_CBWR_AVX512_MIC_E1 : u32 = 13 ; pub const MKL_CBWR_SUCCESS : u32 = 0 ; pub const MKL_CBWR_ERR_INVALID_SETTINGS : i32 = -1 ; pub const MKL_CBWR_ERR_INVALID_INPUT : i32 = -2 ; pub const MKL_CBWR_ERR_UNSUPPORTED_BRANCH : i32 = -3 ; pub const MKL_CBWR_ERR_UNKNOWN_BRANCH : i32 = -4 ; pub const MKL_CBWR_ERR_MODE_CHANGE_FAILURE : i32 = -8 ; pub const MKL_CBWR_SSE3 : u32 = 5 ; pub const _MATH_H : u32 = 1 ; pub const _FEATURES_H : u32 = 1 ; pub const _DEFAULT_SOURCE : u32 = 1 ; pub const __USE_ISOC11 : u32 = 1 ; pub const __USE_ISOC99 : u32 = 1 ; pub const __USE_ISOC95 : u32 = 1 ; pub const __USE_POSIX_IMPLICITLY : u32 = 1 ; pub const _POSIX_SOURCE : u32 = 1 ; pub const _POSIX_C_SOURCE : u32 = 200809 ; pub const __USE_POSIX : u32 = 1 ; pub const __USE_POSIX2 : u32 = 1 ; pub const __USE_POSIX199309 : u32 = 1 ; pub const __USE_POSIX199506 : u32 = 1 ; pub const __USE_XOPEN2K : u32 = 1 ; pub const __USE_XOPEN2K8 : u32 = 1 ; pub const _ATFILE_SOURCE : u32 = 1 ; pub const __USE_MISC : u32 = 1 ; pub const __USE_ATFILE : u32 = 1 ; pub const __USE_FORTIFY_LEVEL : u32 = 0 ; pub const __GLIBC_USE_DEPRECATED_GETS : u32 = 0 ; pub const _STDC_PREDEF_H : u32 = 1 ; pub const __STDC_IEC_559__ : u32 = 1 ; pub const __STDC_IEC_559_COMPLEX__ : u32 = 1 ; pub const __STDC_ISO_10646__ : u32 = 201706 ; pub const __STDC_NO_THREADS__ : u32 = 1 ; pub const __GNU_LIBRARY__ : u32 = 6 ; pub const __GLIBC__ : u32 = 2 ; pub const __GLIBC_MINOR__ : u32 = 27 ; pub const _SYS_CDEFS_H : u32 = 1 ; pub const __glibc_c99_flexarr_available : u32 = 1 ; pub const __WORDSIZE : u32 = 64 ; pub const __WORDSIZE_TIME64_COMPAT32 : u32 = 1 ; pub const __SYSCALL_WORDSIZE : u32 = 64 ; pub const __HAVE_GENERIC_SELECTION : u32 = 1 ; pub const __GLIBC_USE_LIB_EXT2 : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_BFP_EXT : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_FUNCS_EXT : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_TYPES_EXT : u32 = 0 ; pub const _BITS_TYPES_H : u32 = 1 ; pub const _BITS_TYPESIZES_H : u32 = 1 ; pub const __OFF_T_MATCHES_OFF64_T : u32 = 1 ; pub const __INO_T_MATCHES_INO64_T : u32 = 1 ; pub const __RLIM_T_MATCHES_RLIM64_T : u32 = 1 ; pub const __FD_SETSIZE : u32 = 1024 ; pub const _BITS_LIBM_SIMD_DECL_STUBS_H : u32 = 1 ; pub const __HAVE_FLOAT128 : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT128 : u32 = 0 ; pub const __HAVE_FLOAT64X : u32 = 1 ; pub const __HAVE_FLOAT64X_LONG_DOUBLE : u32 = 1 ; pub const __HAVE_FLOAT16 : u32 = 0 ; pub const __HAVE_FLOAT32 : u32 = 1 ; pub const __HAVE_FLOAT64 : u32 = 1 ; pub const __HAVE_FLOAT32X : u32 = 1 ; pub const __HAVE_FLOAT128X : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT16 : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT32 : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT64 : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT32X : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT64X : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT128X : u32 = 0 ; pub const __HAVE_FLOATN_NOT_TYPEDEF : u32 = 0 ; pub const __FP_LOGB0_IS_MIN : u32 = 1 ; pub const __FP_LOGBNAN_IS_MIN : u32 = 1 ; pub const FP_ILOGB0 : i32 = -2147483648 ; pub const FP_ILOGBNAN : i32 = -2147483648 ; pub const __MATH_DECLARING_DOUBLE : u32 = 1 ; pub const __MATH_DECLARING_FLOATN : u32 = 0 ; pub const __MATH_DECLARE_LDOUBLE : u32 = 1 ; pub const FP_NAN : u32 = 0 ; pub const FP_INFINITE : u32 = 1 ; pub const FP_ZERO : u32 = 2 ; pub const FP_SUBNORMAL : u32 = 3 ; pub const FP_NORMAL : u32 = 4 ; pub const MATH_ERRNO : u32 = 1 ; pub const MATH_ERREXCEPT : u32 = 2 ; pub const math_errhandling : u32 = 3 ; pub const M_E : f64 = 2.718281828459045 ; pub const M_LOG2E : f64 = 1.4426950408889634 ; pub const M_LOG10E : f64 = 0.4342944819032518 ; pub const M_LN2 : f64 = 0.6931471805599453 ; pub const M_LN10 : f64 = 2.302585092994046 ; pub const M_PI : f64 = 3.141592653589793 ; pub const M_PI_2 : f64 = 1.5707963267948966 ; pub const M_PI_4 : f64 = 0.7853981633974483 ; pub const M_1_PI : f64 = 0.3183098861837907 ; pub const M_2_PI : f64 = 0.6366197723675814 ; pub const M_2_SQRTPI : f64 = 1.1283791670955126 ; pub const M_SQRT2 : f64 = 1.4142135623730951 ; pub const M_SQRT1_2 : f64 = 0.7071067811865476 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MKL_Complex8 { pub real : f32 , pub imag : f32 , } # [ test ] fn bindgen_test_layout__MKL_Complex8 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _MKL_Complex8 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _MKL_Complex8 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _MKL_Complex8 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _MKL_Complex8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex8 > ( ) ) ) . real as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex8 ) , "::" , stringify ! ( real ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex8 > ( ) ) ) . imag as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex8 ) , "::" , stringify ! ( imag ) ) ) ; } pub type MKL_Complex8 = _MKL_Complex8 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MKL_Complex16 { pub real : f64 , pub imag : f64 , } # [ test ] fn bindgen_test_layout__MKL_Complex16 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _MKL_Complex16 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _MKL_Complex16 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _MKL_Complex16 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _MKL_Complex16 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex16 > ( ) ) ) . real as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex16 ) , "::" , stringify ! ( real ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex16 > ( ) ) ) . imag as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex16 ) , "::" , stringify ! ( imag ) ) ) ; } pub type MKL_Complex16 = _MKL_Complex16 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct MKLVersion { pub MajorVersion : :: std :: os :: raw :: c_int , pub MinorVersion : :: std :: os :: raw :: c_int , pub UpdateVersion : :: std :: os :: raw :: c_int , pub ProductStatus : * mut :: std :: os :: raw :: c_char , pub Build : * mut :: std :: os :: raw :: c_char , pub Processor : * mut :: std :: os :: raw :: c_char , pub Platform : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_MKLVersion ( ) { assert_eq ! ( :: std :: mem :: size_of :: < MKLVersion > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( MKLVersion ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < MKLVersion > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( MKLVersion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . MajorVersion as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( MajorVersion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . MinorVersion as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( MinorVersion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . UpdateVersion as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( UpdateVersion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . ProductStatus as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( ProductStatus ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . Build as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( Build ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . Processor as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( Processor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . Platform as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( Platform ) ) ) ; } pub const MKL_LAYOUT_MKL_ROW_MAJOR : MKL_LAYOUT = 101 ; pub const MKL_LAYOUT_MKL_COL_MAJOR : MKL_LAYOUT = 102 ; pub type MKL_LAYOUT = u32 ; pub const MKL_TRANSPOSE_MKL_NOTRANS : MKL_TRANSPOSE = 111 ; pub const MKL_TRANSPOSE_MKL_TRANS : MKL_TRANSPOSE = 112 ; pub const MKL_TRANSPOSE_MKL_CONJTRANS : MKL_TRANSPOSE = 113 ; pub type MKL_TRANSPOSE = u32 ; pub const MKL_UPLO_MKL_UPPER : MKL_UPLO = 121 ; pub const MKL_UPLO_MKL_LOWER : MKL_UPLO = 122 ; pub type MKL_UPLO = u32 ; pub const MKL_DIAG_MKL_NONUNIT : MKL_DIAG = 131 ; pub const MKL_DIAG_MKL_UNIT : MKL_DIAG = 132 ; pub type MKL_DIAG = u32 ; pub const MKL_SIDE_MKL_LEFT : MKL_SIDE = 141 ; pub const MKL_SIDE_MKL_RIGHT : MKL_SIDE = 142 ; pub type MKL_SIDE = u32 ; pub const MKL_COMPACT_PACK_MKL_COMPACT_SSE : MKL_COMPACT_PACK = 181 ; pub const MKL_COMPACT_PACK_MKL_COMPACT_AVX : MKL_COMPACT_PACK = 182 ; pub const MKL_COMPACT_PACK_MKL_COMPACT_AVX512 : MKL_COMPACT_PACK = 183 ; pub type MKL_COMPACT_PACK = u32 ; pub type __u_char = :: std :: os :: raw :: c_uchar ; pub type __u_short = :: std :: os :: raw :: c_ushort ; pub type __u_int = :: std :: os :: raw :: c_uint ; pub type __u_long = :: std :: os :: raw :: c_ulong ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_long ; pub type __uint64_t = :: std :: os :: raw :: c_ulong ; pub type __quad_t = :: std :: os :: raw :: c_long ; pub type __u_quad_t = :: std :: os :: raw :: c_ulong ; pub type __intmax_t = :: std :: os :: raw :: c_long ; pub type __uintmax_t = :: std :: os :: raw :: c_ulong ; pub type __dev_t = :: std :: os :: raw :: c_ulong ; pub type __uid_t = :: std :: os :: raw :: c_uint ; pub type __gid_t = :: std :: os :: raw :: c_uint ; pub type __ino_t = :: std :: os :: raw :: c_ulong ; pub type __ino64_t = :: std :: os :: raw :: c_ulong ; pub type __mode_t = :: std :: os :: raw :: c_uint ; pub type __nlink_t = :: std :: os :: raw :: c_ulong ; pub type __off_t = :: std :: os :: raw :: c_long ; pub type __off64_t = :: std :: os :: raw :: c_long ; pub type __pid_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __fsid_t { pub __val : [ :: std :: os :: raw :: c_int ; 2usize ] , } # [ test ] fn bindgen_test_layout___fsid_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __fsid_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __fsid_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __fsid_t > ( ) ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __fsid_t ) , "::" , stringify ! ( __val ) ) ) ; } pub type __clock_t = :: std :: os :: raw :: c_long ; pub type __rlim_t = :: std :: os :: raw :: c_ulong ; pub type __rlim64_t = :: std :: os :: raw :: c_ulong ; pub type __id_t = :: std :: os :: raw :: c_uint ; pub type __time_t = :: std :: os :: raw :: c_long ; pub type __useconds_t = :: std :: os :: raw :: c_uint ; pub type __suseconds_t = :: std :: os :: raw :: c_long ; pub type __daddr_t = :: std :: os :: raw :: c_int ; pub type __key_t = :: std :: os :: raw :: c_int ; pub type __clockid_t = :: std :: os :: raw :: c_int ; pub type __timer_t = * mut :: std :: os :: raw :: c_void ; pub type __blksize_t = :: std :: os :: raw :: c_long ; pub type __blkcnt_t = :: std :: os :: raw :: c_long ; pub type __blkcnt64_t = :: std :: os :: raw :: c_long ; pub type __fsblkcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsblkcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsword_t = :: std :: os :: raw :: c_long ; pub type __ssize_t = :: std :: os :: raw :: c_long ; pub type __syscall_slong_t = :: std :: os :: raw :: c_long ; pub type __syscall_ulong_t = :: std :: os :: raw :: c_ulong ; pub type __loff_t = __off64_t ; pub type __caddr_t = * mut :: std :: os :: raw :: c_char ; pub type __intptr_t = :: std :: os :: raw :: c_long ; pub type __socklen_t = :: std :: os :: raw :: c_uint ; pub type __sig_atomic_t = :: std :: os :: raw :: c_int ; pub type _Float32 = f32 ; pub type _Float64 = f64 ; pub type _Float32x = f64 ; pub type _Float64x = u128 ; pub type float_t = f32 ; pub type double_t = f64 ; extern "C" { pub fn __fpclassify ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __signbit ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __isinf ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __finite ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __isnan ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __iseqsig ( __x : f64 , __y : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __issignaling ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn acos ( __x : f64 ) -> f64 ; } extern "C" { pub fn __acos ( __x : f64 ) -> f64 ; } extern "C" { pub fn asin ( __x : f64 ) -> f64 ; } extern "C" { pub fn __asin ( __x : f64 ) -> f64 ; } extern "C" { pub fn atan ( __x : f64 ) -> f64 ; } extern "C" { pub fn __atan ( __x : f64 ) -> f64 ; } extern "C" { pub fn atan2 ( __y : f64 , __x : f64 ) -> f64 ; } extern "C" { pub fn __atan2 ( __y : f64 , __x : f64 ) -> f64 ; } extern "C" { pub fn cos ( __x : f64 ) -> f64 ; } extern "C" { pub fn __cos ( __x : f64 ) -> f64 ; } extern "C" { pub fn sin ( __x : f64 ) -> f64 ; } extern "C" { pub fn __sin ( __x : f64 ) -> f64 ; } extern "C" { pub fn tan ( __x : f64 ) -> f64 ; } extern "C" { pub fn __tan ( __x : f64 ) -> f64 ; } extern "C" { pub fn cosh ( __x : f64 ) -> f64 ; } extern "C" { pub fn __cosh ( __x : f64 ) -> f64 ; } extern "C" { pub fn sinh ( __x : f64 ) -> f64 ; } extern "C" { pub fn __sinh ( __x : f64 ) -> f64 ; } extern "C" { pub fn tanh ( __x : f64 ) -> f64 ; } extern "C" { pub fn __tanh ( __x : f64 ) -> f64 ; } extern "C" { pub fn acosh ( __x : f64 ) -> f64 ; } extern "C" { pub fn __acosh ( __x : f64 ) -> f64 ; } extern "C" { pub fn asinh ( __x : f64 ) -> f64 ; } extern "C" { pub fn __asinh ( __x : f64 ) -> f64 ; } extern "C" { pub fn atanh ( __x : f64 ) -> f64 ; } extern "C" { pub fn __atanh ( __x : f64 ) -> f64 ; } extern "C" { pub fn exp ( __x : f64 ) -> f64 ; } extern "C" { pub fn __exp ( __x : f64 ) -> f64 ; } extern "C" { pub fn frexp ( __x : f64 , __exponent : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __frexp ( __x : f64 , __exponent : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn ldexp ( __x : f64 , __exponent : :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __ldexp ( __x : f64 , __exponent : :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn log ( __x : f64 ) -> f64 ; } extern "C" { pub fn __log ( __x : f64 ) -> f64 ; } extern "C" { pub fn log10 ( __x : f64 ) -> f64 ; } extern "C" { pub fn __log10 ( __x : f64 ) -> f64 ; } extern "C" { pub fn modf ( __x : f64 , __iptr : * mut f64 ) -> f64 ; } extern "C" { pub fn __modf ( __x : f64 , __iptr : * mut f64 ) -> f64 ; } extern "C" { pub fn expm1 ( __x : f64 ) -> f64 ; } extern "C" { pub fn __expm1 ( __x : f64 ) -> f64 ; } extern "C" { pub fn log1p ( __x : f64 ) -> f64 ; } extern "C" { pub fn __log1p ( __x : f64 ) -> f64 ; } extern "C" { pub fn logb ( __x : f64 ) -> f64 ; } extern "C" { pub fn __logb ( __x : f64 ) -> f64 ; } extern "C" { pub fn exp2 ( __x : f64 ) -> f64 ; } extern "C" { pub fn __exp2 ( __x : f64 ) -> f64 ; } extern "C" { pub fn log2 ( __x : f64 ) -> f64 ; } extern "C" { pub fn __log2 ( __x : f64 ) -> f64 ; } extern "C" { pub fn pow ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __pow ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn sqrt ( __x : f64 ) -> f64 ; } extern "C" { pub fn __sqrt ( __x : f64 ) -> f64 ; } extern "C" { pub fn hypot ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __hypot ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn cbrt ( __x : f64 ) -> f64 ; } extern "C" { pub fn __cbrt ( __x : f64 ) -> f64 ; } extern "C" { pub fn ceil ( __x : f64 ) -> f64 ; } extern "C" { pub fn __ceil ( __x : f64 ) -> f64 ; } extern "C" { pub fn fabs ( __x : f64 ) -> f64 ; } extern "C" { pub fn __fabs ( __x : f64 ) -> f64 ; } extern "C" { pub fn floor ( __x : f64 ) -> f64 ; } extern "C" { pub fn __floor ( __x : f64 ) -> f64 ; } extern "C" { pub fn fmod ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __fmod ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn isinf ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn finite ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn drem ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __drem ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn significand ( __x : f64 ) -> f64 ; } extern "C" { pub fn __significand ( __x : f64 ) -> f64 ; } extern "C" { pub fn copysign ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __copysign ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn nan ( __tagb : * const :: std :: os :: raw :: c_char ) -> f64 ; } extern "C" { pub fn __nan ( __tagb : * const :: std :: os :: raw :: c_char ) -> f64 ; } extern "C" { pub fn isnan ( __value : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn j0 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __j0 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn j1 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __j1 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn jn ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 ) -> f64 ; } extern "C" { pub fn __jn ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 ) -> f64 ; } extern "C" { pub fn y0 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __y0 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn y1 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __y1 ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn yn ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 ) -> f64 ; } extern "C" { pub fn __yn ( arg1 : :: std :: os :: raw :: c_int , arg2 : f64 ) -> f64 ; } extern "C" { pub fn erf ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __erf ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn erfc ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __erfc ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn lgamma ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __lgamma ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn tgamma ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __tgamma ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn gamma ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn __gamma ( arg1 : f64 ) -> f64 ; } extern "C" { pub fn lgamma_r ( arg1 : f64 , __signgamp : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __lgamma_r ( arg1 : f64 , __signgamp : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn rint ( __x : f64 ) -> f64 ; } extern "C" { pub fn __rint ( __x : f64 ) -> f64 ; } extern "C" { pub fn nextafter ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __nextafter ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn nexttoward ( __x : f64 , __y : u128 ) -> f64 ; } extern "C" { pub fn __nexttoward ( __x : f64 , __y : u128 ) -> f64 ; } extern "C" { pub fn remainder ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __remainder ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn scalbn ( __x : f64 , __n : :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __scalbn ( __x : f64 , __n : :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn ilogb ( __x : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __ilogb ( __x : f64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn scalbln ( __x : f64 , __n : :: std :: os :: raw :: c_long ) -> f64 ; } extern "C" { pub fn __scalbln ( __x : f64 , __n : :: std :: os :: raw :: c_long ) -> f64 ; } extern "C" { pub fn nearbyint ( __x : f64 ) -> f64 ; } extern "C" { pub fn __nearbyint ( __x : f64 ) -> f64 ; } extern "C" { pub fn round ( __x : f64 ) -> f64 ; } extern "C" { pub fn __round ( __x : f64 ) -> f64 ; } extern "C" { pub fn trunc ( __x : f64 ) -> f64 ; } extern "C" { pub fn __trunc ( __x : f64 ) -> f64 ; } extern "C" { pub fn remquo ( __x : f64 , __y : f64 , __quo : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn __remquo ( __x : f64 , __y : f64 , __quo : * mut :: std :: os :: raw :: c_int ) -> f64 ; } extern "C" { pub fn lrint ( __x : f64 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn __lrint ( __x : f64 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llrint ( __x : f64 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn __llrint ( __x : f64 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn lround ( __x : f64 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn __lround ( __x : f64 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llround ( __x : f64 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn __llround ( __x : f64 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn fdim ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __fdim ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn fmax ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __fmax ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn fmin ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn __fmin ( __x : f64 , __y : f64 ) -> f64 ; } extern "C" { pub fn fma ( __x : f64 , __y : f64 , __z : f64 ) -> f64 ; } extern "C" { pub fn __fma ( __x : f64 , __y : f64 , __z : f64 ) -> f64 ; } extern "C" { pub fn scalb ( __x : f64 , __n : f64 ) -> f64 ; } extern "C" { pub fn __scalb ( __x : f64 , __n : f64 ) -> f64 ; } extern "C" { pub fn __fpclassifyf ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __signbitf ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __isinff ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __finitef ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __isnanf ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __iseqsigf ( __x : f32 , __y : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __issignalingf ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn acosf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __acosf ( __x : f32 ) -> f32 ; } extern "C" { pub fn asinf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __asinf ( __x : f32 ) -> f32 ; } extern "C" { pub fn atanf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __atanf ( __x : f32 ) -> f32 ; } extern "C" { pub fn atan2f ( __y : f32 , __x : f32 ) -> f32 ; } extern "C" { pub fn __atan2f ( __y : f32 , __x : f32 ) -> f32 ; } extern "C" { pub fn cosf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __cosf ( __x : f32 ) -> f32 ; } extern "C" { pub fn sinf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __sinf ( __x : f32 ) -> f32 ; } extern "C" { pub fn tanf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __tanf ( __x : f32 ) -> f32 ; } extern "C" { pub fn coshf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __coshf ( __x : f32 ) -> f32 ; } extern "C" { pub fn sinhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __sinhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn tanhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __tanhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn acoshf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __acoshf ( __x : f32 ) -> f32 ; } extern "C" { pub fn asinhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __asinhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn atanhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __atanhf ( __x : f32 ) -> f32 ; } extern "C" { pub fn expf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __expf ( __x : f32 ) -> f32 ; } extern "C" { pub fn frexpf ( __x : f32 , __exponent : * mut :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn __frexpf ( __x : f32 , __exponent : * mut :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn ldexpf ( __x : f32 , __exponent : :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn __ldexpf ( __x : f32 , __exponent : :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn logf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __logf ( __x : f32 ) -> f32 ; } extern "C" { pub fn log10f ( __x : f32 ) -> f32 ; } extern "C" { pub fn __log10f ( __x : f32 ) -> f32 ; } extern "C" { pub fn modff ( __x : f32 , __iptr : * mut f32 ) -> f32 ; } extern "C" { pub fn __modff ( __x : f32 , __iptr : * mut f32 ) -> f32 ; } extern "C" { pub fn expm1f ( __x : f32 ) -> f32 ; } extern "C" { pub fn __expm1f ( __x : f32 ) -> f32 ; } extern "C" { pub fn log1pf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __log1pf ( __x : f32 ) -> f32 ; } extern "C" { pub fn logbf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __logbf ( __x : f32 ) -> f32 ; } extern "C" { pub fn exp2f ( __x : f32 ) -> f32 ; } extern "C" { pub fn __exp2f ( __x : f32 ) -> f32 ; } extern "C" { pub fn log2f ( __x : f32 ) -> f32 ; } extern "C" { pub fn __log2f ( __x : f32 ) -> f32 ; } extern "C" { pub fn powf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __powf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn sqrtf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __sqrtf ( __x : f32 ) -> f32 ; } extern "C" { pub fn hypotf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __hypotf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn cbrtf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __cbrtf ( __x : f32 ) -> f32 ; } extern "C" { pub fn ceilf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __ceilf ( __x : f32 ) -> f32 ; } extern "C" { pub fn fabsf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __fabsf ( __x : f32 ) -> f32 ; } extern "C" { pub fn floorf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __floorf ( __x : f32 ) -> f32 ; } extern "C" { pub fn fmodf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __fmodf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn isinff ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn finitef ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn dremf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __dremf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn significandf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __significandf ( __x : f32 ) -> f32 ; } extern "C" { pub fn copysignf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __copysignf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn nanf ( __tagb : * const :: std :: os :: raw :: c_char ) -> f32 ; } extern "C" { pub fn __nanf ( __tagb : * const :: std :: os :: raw :: c_char ) -> f32 ; } extern "C" { pub fn isnanf ( __value : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn j0f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __j0f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn j1f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __j1f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn jnf ( arg1 : :: std :: os :: raw :: c_int , arg2 : f32 ) -> f32 ; } extern "C" { pub fn __jnf ( arg1 : :: std :: os :: raw :: c_int , arg2 : f32 ) -> f32 ; } extern "C" { pub fn y0f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __y0f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn y1f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __y1f ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn ynf ( arg1 : :: std :: os :: raw :: c_int , arg2 : f32 ) -> f32 ; } extern "C" { pub fn __ynf ( arg1 : :: std :: os :: raw :: c_int , arg2 : f32 ) -> f32 ; } extern "C" { pub fn erff ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __erff ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn erfcf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __erfcf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn lgammaf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __lgammaf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn tgammaf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __tgammaf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn gammaf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn __gammaf ( arg1 : f32 ) -> f32 ; } extern "C" { pub fn lgammaf_r ( arg1 : f32 , __signgamp : * mut :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn __lgammaf_r ( arg1 : f32 , __signgamp : * mut :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn rintf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __rintf ( __x : f32 ) -> f32 ; } extern "C" { pub fn nextafterf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __nextafterf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn nexttowardf ( __x : f32 , __y : u128 ) -> f32 ; } extern "C" { pub fn __nexttowardf ( __x : f32 , __y : u128 ) -> f32 ; } extern "C" { pub fn remainderf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __remainderf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn scalbnf ( __x : f32 , __n : :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn __scalbnf ( __x : f32 , __n : :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn ilogbf ( __x : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __ilogbf ( __x : f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn scalblnf ( __x : f32 , __n : :: std :: os :: raw :: c_long ) -> f32 ; } extern "C" { pub fn __scalblnf ( __x : f32 , __n : :: std :: os :: raw :: c_long ) -> f32 ; } extern "C" { pub fn nearbyintf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __nearbyintf ( __x : f32 ) -> f32 ; } extern "C" { pub fn roundf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __roundf ( __x : f32 ) -> f32 ; } extern "C" { pub fn truncf ( __x : f32 ) -> f32 ; } extern "C" { pub fn __truncf ( __x : f32 ) -> f32 ; } extern "C" { pub fn remquof ( __x : f32 , __y : f32 , __quo : * mut :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn __remquof ( __x : f32 , __y : f32 , __quo : * mut :: std :: os :: raw :: c_int ) -> f32 ; } extern "C" { pub fn lrintf ( __x : f32 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn __lrintf ( __x : f32 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llrintf ( __x : f32 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn __llrintf ( __x : f32 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn lroundf ( __x : f32 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn __lroundf ( __x : f32 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llroundf ( __x : f32 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn __llroundf ( __x : f32 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn fdimf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __fdimf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn fmaxf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __fmaxf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn fminf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn __fminf ( __x : f32 , __y : f32 ) -> f32 ; } extern "C" { pub fn fmaf ( __x : f32 , __y : f32 , __z : f32 ) -> f32 ; } extern "C" { pub fn __fmaf ( __x : f32 , __y : f32 , __z : f32 ) -> f32 ; } extern "C" { pub fn scalbf ( __x : f32 , __n : f32 ) -> f32 ; } extern "C" { pub fn __scalbf ( __x : f32 , __n : f32 ) -> f32 ; } extern "C" { pub fn __fpclassifyl ( __value : u128 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __signbitl ( __value : u128 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __isinfl ( __value : u128 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __finitel ( __value : u128 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __isnanl ( __value : u128 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __iseqsigl ( __x : u128 , __y : u128 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __issignalingl ( __value : u128 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn acosl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __acosl ( __x : u128 ) -> u128 ; } extern "C" { pub fn asinl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __asinl ( __x : u128 ) -> u128 ; } extern "C" { pub fn atanl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __atanl ( __x : u128 ) -> u128 ; } extern "C" { pub fn atan2l ( __y : u128 , __x : u128 ) -> u128 ; } extern "C" { pub fn __atan2l ( __y : u128 , __x : u128 ) -> u128 ; } extern "C" { pub fn cosl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __cosl ( __x : u128 ) -> u128 ; } extern "C" { pub fn sinl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __sinl ( __x : u128 ) -> u128 ; } extern "C" { pub fn tanl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __tanl ( __x : u128 ) -> u128 ; } extern "C" { pub fn coshl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __coshl ( __x : u128 ) -> u128 ; } extern "C" { pub fn sinhl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __sinhl ( __x : u128 ) -> u128 ; } extern "C" { pub fn tanhl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __tanhl ( __x : u128 ) -> u128 ; } extern "C" { pub fn acoshl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __acoshl ( __x : u128 ) -> u128 ; } extern "C" { pub fn asinhl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __asinhl ( __x : u128 ) -> u128 ; } extern "C" { pub fn atanhl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __atanhl ( __x : u128 ) -> u128 ; } extern "C" { pub fn expl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __expl ( __x : u128 ) -> u128 ; } extern "C" { pub fn frexpl ( __x : u128 , __exponent : * mut :: std :: os :: raw :: c_int ) -> u128 ; } extern "C" { pub fn __frexpl ( __x : u128 , __exponent : * mut :: std :: os :: raw :: c_int ) -> u128 ; } extern "C" { pub fn ldexpl ( __x : u128 , __exponent : :: std :: os :: raw :: c_int ) -> u128 ; } extern "C" { pub fn __ldexpl ( __x : u128 , __exponent : :: std :: os :: raw :: c_int ) -> u128 ; } extern "C" { pub fn logl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __logl ( __x : u128 ) -> u128 ; } extern "C" { pub fn log10l ( __x : u128 ) -> u128 ; } extern "C" { pub fn __log10l ( __x : u128 ) -> u128 ; } extern "C" { pub fn modfl ( __x : u128 , __iptr : * mut u128 ) -> u128 ; } extern "C" { pub fn __modfl ( __x : u128 , __iptr : * mut u128 ) -> u128 ; } extern "C" { pub fn expm1l ( __x : u128 ) -> u128 ; } extern "C" { pub fn __expm1l ( __x : u128 ) -> u128 ; } extern "C" { pub fn log1pl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __log1pl ( __x : u128 ) -> u128 ; } extern "C" { pub fn logbl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __logbl ( __x : u128 ) -> u128 ; } extern "C" { pub fn exp2l ( __x : u128 ) -> u128 ; } extern "C" { pub fn __exp2l ( __x : u128 ) -> u128 ; } extern "C" { pub fn log2l ( __x : u128 ) -> u128 ; } extern "C" { pub fn __log2l ( __x : u128 ) -> u128 ; } extern "C" { pub fn powl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn __powl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn sqrtl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __sqrtl ( __x : u128 ) -> u128 ; } extern "C" { pub fn hypotl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn __hypotl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn cbrtl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __cbrtl ( __x : u128 ) -> u128 ; } extern "C" { pub fn ceill ( __x : u128 ) -> u128 ; } extern "C" { pub fn __ceill ( __x : u128 ) -> u128 ; } extern "C" { pub fn fabsl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __fabsl ( __x : u128 ) -> u128 ; } extern "C" { pub fn floorl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __floorl ( __x : u128 ) -> u128 ; } extern "C" { pub fn fmodl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn __fmodl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn isinfl ( __value : u128 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn finitel ( __value : u128 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn dreml ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn __dreml ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn significandl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __significandl ( __x : u128 ) -> u128 ; } extern "C" { pub fn copysignl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn __copysignl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn nanl ( __tagb : * const :: std :: os :: raw :: c_char ) -> u128 ; } extern "C" { pub fn __nanl ( __tagb : * const :: std :: os :: raw :: c_char ) -> u128 ; } extern "C" { pub fn isnanl ( __value : u128 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn j0l ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn __j0l ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn j1l ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn __j1l ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn jnl ( arg1 : :: std :: os :: raw :: c_int , arg2 : u128 ) -> u128 ; } extern "C" { pub fn __jnl ( arg1 : :: std :: os :: raw :: c_int , arg2 : u128 ) -> u128 ; } extern "C" { pub fn y0l ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn __y0l ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn y1l ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn __y1l ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn ynl ( arg1 : :: std :: os :: raw :: c_int , arg2 : u128 ) -> u128 ; } extern "C" { pub fn __ynl ( arg1 : :: std :: os :: raw :: c_int , arg2 : u128 ) -> u128 ; } extern "C" { pub fn erfl ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn __erfl ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn erfcl ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn __erfcl ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn lgammal ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn __lgammal ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn tgammal ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn __tgammal ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn gammal ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn __gammal ( arg1 : u128 ) -> u128 ; } extern "C" { pub fn lgammal_r ( arg1 : u128 , __signgamp : * mut :: std :: os :: raw :: c_int ) -> u128 ; } extern "C" { pub fn __lgammal_r ( arg1 : u128 , __signgamp : * mut :: std :: os :: raw :: c_int ) -> u128 ; } extern "C" { pub fn rintl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __rintl ( __x : u128 ) -> u128 ; } extern "C" { pub fn nextafterl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn __nextafterl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn nexttowardl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn __nexttowardl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn remainderl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn __remainderl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn scalbnl ( __x : u128 , __n : :: std :: os :: raw :: c_int ) -> u128 ; } extern "C" { pub fn __scalbnl ( __x : u128 , __n : :: std :: os :: raw :: c_int ) -> u128 ; } extern "C" { pub fn ilogbl ( __x : u128 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __ilogbl ( __x : u128 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn scalblnl ( __x : u128 , __n : :: std :: os :: raw :: c_long ) -> u128 ; } extern "C" { pub fn __scalblnl ( __x : u128 , __n : :: std :: os :: raw :: c_long ) -> u128 ; } extern "C" { pub fn nearbyintl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __nearbyintl ( __x : u128 ) -> u128 ; } extern "C" { pub fn roundl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __roundl ( __x : u128 ) -> u128 ; } extern "C" { pub fn truncl ( __x : u128 ) -> u128 ; } extern "C" { pub fn __truncl ( __x : u128 ) -> u128 ; } extern "C" { pub fn remquol ( __x : u128 , __y : u128 , __quo : * mut :: std :: os :: raw :: c_int ) -> u128 ; } extern "C" { pub fn __remquol ( __x : u128 , __y : u128 , __quo : * mut :: std :: os :: raw :: c_int ) -> u128 ; } extern "C" { pub fn lrintl ( __x : u128 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn __lrintl ( __x : u128 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llrintl ( __x : u128 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn __llrintl ( __x : u128 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn lroundl ( __x : u128 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn __lroundl ( __x : u128 ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn llroundl ( __x : u128 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn __llroundl ( __x : u128 ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn fdiml ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn __fdiml ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn fmaxl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn __fmaxl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn fminl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn __fminl ( __x : u128 , __y : u128 ) -> u128 ; } extern "C" { pub fn fmal ( __x : u128 , __y : u128 , __z : u128 ) -> u128 ; } extern "C" { pub fn __fmal ( __x : u128 , __y : u128 , __z : u128 ) -> u128 ; } extern "C" { pub fn scalbl ( __x : u128 , __n : u128 ) -> u128 ; } extern "C" { pub fn __scalbl ( __x : u128 , __n : u128 ) -> u128 ; } extern "C" { pub static mut signgam : :: std :: os :: raw :: c_int ; } pub const FP_NAN : _bindgen_ty_1 = 0 ; pub const FP_INFINITE : _bindgen_ty_1 = 1 ; pub const FP_ZERO : _bindgen_ty_1 = 2 ; pub const FP_SUBNORMAL : _bindgen_ty_1 = 3 ; pub const FP_NORMAL : _bindgen_ty_1 = 4 ; pub type _bindgen_ty_1 = u32 ;
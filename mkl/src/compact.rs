/* automatically generated by rust-bindgen */

pub const MKL_DOMAIN_ALL : u32 = 0 ; pub const MKL_DOMAIN_BLAS : u32 = 1 ; pub const MKL_DOMAIN_FFT : u32 = 2 ; pub const MKL_DOMAIN_VML : u32 = 3 ; pub const MKL_DOMAIN_PARDISO : u32 = 4 ; pub const MKL_CBWR_BRANCH : u32 = 1 ; pub const MKL_CBWR_ALL : i32 = -1 ; pub const MKL_CBWR_UNSET_ALL : u32 = 0 ; pub const MKL_CBWR_OFF : u32 = 0 ; pub const MKL_CBWR_BRANCH_OFF : u32 = 1 ; pub const MKL_CBWR_AUTO : u32 = 2 ; pub const MKL_CBWR_COMPATIBLE : u32 = 3 ; pub const MKL_CBWR_SSE2 : u32 = 4 ; pub const MKL_CBWR_SSSE3 : u32 = 6 ; pub const MKL_CBWR_SSE4_1 : u32 = 7 ; pub const MKL_CBWR_SSE4_2 : u32 = 8 ; pub const MKL_CBWR_AVX : u32 = 9 ; pub const MKL_CBWR_AVX2 : u32 = 10 ; pub const MKL_CBWR_AVX512_MIC : u32 = 11 ; pub const MKL_CBWR_AVX512 : u32 = 12 ; pub const MKL_CBWR_AVX512_MIC_E1 : u32 = 13 ; pub const MKL_CBWR_SUCCESS : u32 = 0 ; pub const MKL_CBWR_ERR_INVALID_SETTINGS : i32 = -1 ; pub const MKL_CBWR_ERR_INVALID_INPUT : i32 = -2 ; pub const MKL_CBWR_ERR_UNSUPPORTED_BRANCH : i32 = -3 ; pub const MKL_CBWR_ERR_UNKNOWN_BRANCH : i32 = -4 ; pub const MKL_CBWR_ERR_MODE_CHANGE_FAILURE : i32 = -8 ; pub const MKL_CBWR_SSE3 : u32 = 5 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MKL_Complex8 { pub real : f32 , pub imag : f32 , } # [ test ] fn bindgen_test_layout__MKL_Complex8 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _MKL_Complex8 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _MKL_Complex8 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _MKL_Complex8 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _MKL_Complex8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex8 > ( ) ) ) . real as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex8 ) , "::" , stringify ! ( real ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex8 > ( ) ) ) . imag as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex8 ) , "::" , stringify ! ( imag ) ) ) ; } pub type MKL_Complex8 = _MKL_Complex8 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MKL_Complex16 { pub real : f64 , pub imag : f64 , } # [ test ] fn bindgen_test_layout__MKL_Complex16 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _MKL_Complex16 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _MKL_Complex16 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _MKL_Complex16 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _MKL_Complex16 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex16 > ( ) ) ) . real as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex16 ) , "::" , stringify ! ( real ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _MKL_Complex16 > ( ) ) ) . imag as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _MKL_Complex16 ) , "::" , stringify ! ( imag ) ) ) ; } pub type MKL_Complex16 = _MKL_Complex16 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct MKLVersion { pub MajorVersion : :: std :: os :: raw :: c_int , pub MinorVersion : :: std :: os :: raw :: c_int , pub UpdateVersion : :: std :: os :: raw :: c_int , pub ProductStatus : * mut :: std :: os :: raw :: c_char , pub Build : * mut :: std :: os :: raw :: c_char , pub Processor : * mut :: std :: os :: raw :: c_char , pub Platform : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_MKLVersion ( ) { assert_eq ! ( :: std :: mem :: size_of :: < MKLVersion > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( MKLVersion ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < MKLVersion > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( MKLVersion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . MajorVersion as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( MajorVersion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . MinorVersion as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( MinorVersion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . UpdateVersion as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( UpdateVersion ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . ProductStatus as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( ProductStatus ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . Build as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( Build ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . Processor as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( Processor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < MKLVersion > ( ) ) ) . Platform as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( MKLVersion ) , "::" , stringify ! ( Platform ) ) ) ; } pub const MKL_LAYOUT_MKL_ROW_MAJOR : MKL_LAYOUT = 101 ; pub const MKL_LAYOUT_MKL_COL_MAJOR : MKL_LAYOUT = 102 ; pub type MKL_LAYOUT = u32 ; pub const MKL_TRANSPOSE_MKL_NOTRANS : MKL_TRANSPOSE = 111 ; pub const MKL_TRANSPOSE_MKL_TRANS : MKL_TRANSPOSE = 112 ; pub const MKL_TRANSPOSE_MKL_CONJTRANS : MKL_TRANSPOSE = 113 ; pub type MKL_TRANSPOSE = u32 ; pub const MKL_UPLO_MKL_UPPER : MKL_UPLO = 121 ; pub const MKL_UPLO_MKL_LOWER : MKL_UPLO = 122 ; pub type MKL_UPLO = u32 ; pub const MKL_DIAG_MKL_NONUNIT : MKL_DIAG = 131 ; pub const MKL_DIAG_MKL_UNIT : MKL_DIAG = 132 ; pub type MKL_DIAG = u32 ; pub const MKL_SIDE_MKL_LEFT : MKL_SIDE = 141 ; pub const MKL_SIDE_MKL_RIGHT : MKL_SIDE = 142 ; pub type MKL_SIDE = u32 ; pub const MKL_COMPACT_PACK_MKL_COMPACT_SSE : MKL_COMPACT_PACK = 181 ; pub const MKL_COMPACT_PACK_MKL_COMPACT_AVX : MKL_COMPACT_PACK = 182 ; pub const MKL_COMPACT_PACK_MKL_COMPACT_AVX512 : MKL_COMPACT_PACK = 183 ; pub type MKL_COMPACT_PACK = u32 ; extern "C" { pub fn mkl_get_format_compact ( ) -> MKL_COMPACT_PACK ; } extern "C" { pub fn mkl_sget_size_compact ( ld : :: std :: os :: raw :: c_int , sd : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkl_sgepack_compact ( layout : MKL_LAYOUT , rows : :: std :: os :: raw :: c_int , columns : :: std :: os :: raw :: c_int , a : * const * const f32 , lda : :: std :: os :: raw :: c_int , ap : * mut f32 , ldap : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_sgeunpack_compact ( layout : MKL_LAYOUT , rows : :: std :: os :: raw :: c_int , columns : :: std :: os :: raw :: c_int , a : * const * mut f32 , lda : :: std :: os :: raw :: c_int , ap : * const f32 , ldap : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_sgemm_compact ( layout : MKL_LAYOUT , transa : MKL_TRANSPOSE , transb : MKL_TRANSPOSE , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , k : :: std :: os :: raw :: c_int , alpha : f32 , ap : * const f32 , ldap : :: std :: os :: raw :: c_int , bp : * const f32 , ldbp : :: std :: os :: raw :: c_int , beta : f32 , cp : * mut f32 , ldcp : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_strsm_compact ( layout : MKL_LAYOUT , side : MKL_SIDE , uplo : MKL_UPLO , transa : MKL_TRANSPOSE , diag : MKL_DIAG , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , alpha : f32 , ap : * const f32 , ldap : :: std :: os :: raw :: c_int , bp : * mut f32 , ldbp : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_dget_size_compact ( ld : :: std :: os :: raw :: c_int , sd : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkl_dgepack_compact ( layout : MKL_LAYOUT , rows : :: std :: os :: raw :: c_int , columns : :: std :: os :: raw :: c_int , a : * const * const f64 , lda : :: std :: os :: raw :: c_int , ap : * mut f64 , ldap : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_dgeunpack_compact ( layout : MKL_LAYOUT , rows : :: std :: os :: raw :: c_int , columns : :: std :: os :: raw :: c_int , a : * const * mut f64 , lda : :: std :: os :: raw :: c_int , ap : * const f64 , ldap : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_dgemm_compact ( layout : MKL_LAYOUT , transa : MKL_TRANSPOSE , transb : MKL_TRANSPOSE , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , k : :: std :: os :: raw :: c_int , alpha : f64 , a : * const f64 , ldap : :: std :: os :: raw :: c_int , b : * const f64 , ldbp : :: std :: os :: raw :: c_int , beta : f64 , c : * mut f64 , ldcp : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_dtrsm_compact ( layout : MKL_LAYOUT , side : MKL_SIDE , uplo : MKL_UPLO , transa : MKL_TRANSPOSE , diag : MKL_DIAG , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , alpha : f64 , a : * const f64 , ldap : :: std :: os :: raw :: c_int , b : * mut f64 , ldbp : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_cget_size_compact ( ld : :: std :: os :: raw :: c_int , sd : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkl_cgepack_compact ( layout : MKL_LAYOUT , rows : :: std :: os :: raw :: c_int , columns : :: std :: os :: raw :: c_int , a : * const * const MKL_Complex8 , lda : :: std :: os :: raw :: c_int , ap : * mut f32 , ldap : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_cgeunpack_compact ( layout : MKL_LAYOUT , rows : :: std :: os :: raw :: c_int , columns : :: std :: os :: raw :: c_int , a : * const * mut MKL_Complex8 , lda : :: std :: os :: raw :: c_int , ap : * const f32 , ldap : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_cgemm_compact ( layout : MKL_LAYOUT , transa : MKL_TRANSPOSE , transb : MKL_TRANSPOSE , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , k : :: std :: os :: raw :: c_int , alpha : * const MKL_Complex8 , a : * const f32 , ldap : :: std :: os :: raw :: c_int , b : * const f32 , ldbp : :: std :: os :: raw :: c_int , beta : * const MKL_Complex8 , c : * mut f32 , ldcp : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_ctrsm_compact ( layout : MKL_LAYOUT , side : MKL_SIDE , uplo : MKL_UPLO , transa : MKL_TRANSPOSE , diag : MKL_DIAG , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , alpha : * const MKL_Complex8 , a : * const f32 , ldap : :: std :: os :: raw :: c_int , b : * mut f32 , ldbp : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_zget_size_compact ( ld : :: std :: os :: raw :: c_int , sd : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkl_zgepack_compact ( layout : MKL_LAYOUT , rows : :: std :: os :: raw :: c_int , columns : :: std :: os :: raw :: c_int , a : * const * const MKL_Complex16 , lda : :: std :: os :: raw :: c_int , ap : * mut f64 , ldap : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_zgeunpack_compact ( layout : MKL_LAYOUT , rows : :: std :: os :: raw :: c_int , columns : :: std :: os :: raw :: c_int , a : * const * mut MKL_Complex16 , lda : :: std :: os :: raw :: c_int , ap : * const f64 , ldap : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_zgemm_compact ( layout : MKL_LAYOUT , transa : MKL_TRANSPOSE , transb : MKL_TRANSPOSE , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , k : :: std :: os :: raw :: c_int , alpha : * const MKL_Complex16 , a : * const f64 , ldap : :: std :: os :: raw :: c_int , b : * const f64 , ldbp : :: std :: os :: raw :: c_int , beta : * const MKL_Complex16 , c : * mut f64 , ldcp : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_ztrsm_compact ( layout : MKL_LAYOUT , side : MKL_SIDE , uplo : MKL_UPLO , transa : MKL_TRANSPOSE , diag : MKL_DIAG , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , alpha : * const MKL_Complex16 , a : * const f64 , ldap : :: std :: os :: raw :: c_int , b : * mut f64 , ldbp : :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_cgetrinp_compact ( layout : MKL_LAYOUT , n : :: std :: os :: raw :: c_int , ap : * mut f32 , ldap : :: std :: os :: raw :: c_int , work : * mut f32 , lwork : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_dgetrinp_compact ( layout : MKL_LAYOUT , n : :: std :: os :: raw :: c_int , ap : * mut f64 , ldap : :: std :: os :: raw :: c_int , work : * mut f64 , lwork : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_sgetrinp_compact ( layout : MKL_LAYOUT , n : :: std :: os :: raw :: c_int , ap : * mut f32 , ldap : :: std :: os :: raw :: c_int , work : * mut f32 , lwork : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_zgetrinp_compact ( layout : MKL_LAYOUT , n : :: std :: os :: raw :: c_int , ap : * mut f64 , ldap : :: std :: os :: raw :: c_int , work : * mut f64 , lwork : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_cgetrfnp_compact ( layout : MKL_LAYOUT , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , ap : * mut f32 , ldap : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_dgetrfnp_compact ( layout : MKL_LAYOUT , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , ap : * mut f64 , ldap : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_sgetrfnp_compact ( layout : MKL_LAYOUT , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , ap : * mut f32 , ldap : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_zgetrfnp_compact ( layout : MKL_LAYOUT , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , ap : * mut f64 , ldap : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_cpotrf_compact ( layout : MKL_LAYOUT , uplo : MKL_UPLO , n : :: std :: os :: raw :: c_int , ap : * mut f32 , ldap : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_dpotrf_compact ( layout : MKL_LAYOUT , uplo : MKL_UPLO , n : :: std :: os :: raw :: c_int , ap : * mut f64 , ldap : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_spotrf_compact ( layout : MKL_LAYOUT , uplo : MKL_UPLO , n : :: std :: os :: raw :: c_int , ap : * mut f32 , ldap : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_zpotrf_compact ( layout : MKL_LAYOUT , uplo : MKL_UPLO , n : :: std :: os :: raw :: c_int , ap : * mut f64 , ldap : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_cgeqrf_compact ( layout : MKL_LAYOUT , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , ap : * mut f32 , ldap : :: std :: os :: raw :: c_int , taup : * mut f32 , work : * mut f32 , lwork : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_dgeqrf_compact ( layout : MKL_LAYOUT , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , ap : * mut f64 , ldap : :: std :: os :: raw :: c_int , taup : * mut f64 , work : * mut f64 , lwork : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_sgeqrf_compact ( layout : MKL_LAYOUT , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , ap : * mut f32 , ldap : :: std :: os :: raw :: c_int , taup : * mut f32 , work : * mut f32 , lwork : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn mkl_zgeqrf_compact ( layout : MKL_LAYOUT , m : :: std :: os :: raw :: c_int , n : :: std :: os :: raw :: c_int , ap : * mut f64 , ldap : :: std :: os :: raw :: c_int , taup : * mut f64 , work : * mut f64 , lwork : :: std :: os :: raw :: c_int , info : * mut :: std :: os :: raw :: c_int , format : MKL_COMPACT_PACK , nm : :: std :: os :: raw :: c_int ) ; }